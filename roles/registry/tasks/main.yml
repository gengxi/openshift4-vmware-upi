---
# tasks file for registry
- name: Install required packages
  yum:
    name: "{{ item }}"
    state: latest
  loop:
    - podman
    - httpd-tools
    - tar 
    - openssl

- name: pip install 
  pip:
    name: "{{ item }}"
    extra_args: "{{pip_extra_args}}" 
  loop:
    - passlib
    - bcrypt

- name: Make registry directories
  file:
    path: "/opt/registry/{{item}}"
    state: directory
    mode: 0755
  loop:
    - auth
    - certs
    - data

- name: Check for registry cert existence
  stat:
    path: /opt/registry/certs/domain.crt
  register: cert

# openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt
- name: Create self-signed cert
  command: |
    openssl req -newkey rsa:4096 -days 365 -nodes -sha256 -x509 \
    -subj "/CN={{ansible_fqdn}}" \
    -keyout /opt/registry/certs/domain.key 
    -out /opt/registry/certs/domain.crt
  when: not cert.stat.exists

# openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt  
# - name: Generate private key
#   openssl_privatekey:
#     path: /opt/registry/certs/domain.key
#     size: 4096
#     type: RSA
#     select_crypto_backend: cryptography
#   when: not cert.stat.exists

# This does not generate a 
# Subject: C=XX, L=Default City, O=Default Company Ltd, CN=ocp4-bastion.ocppoc.vsphere.lab.ltsai.com ..
# - name: Generate csr
#   openssl_csr:
#     path: /opt/registry/certs/domain.csr
#     privatekey_path: /opt/registry/certs/domain.key
#     common_name: "{{ansible_fqdn}}"
#     organization_name: 'Default Company Ltd'
#     locality_name: 'Default  City'
#     country_name: XX
#     select_crypto_backend: cryptography
#   when: not cert.stat.exists

# - name: Generate self-signed certificate
#   openssl_certificate:
#     path: /opt/registry/certs/domain.crt
#     privatekey_path: /opt/registry/certs/domain.key
#     csr_path: /opt/registry/certs/domain.csr
#     selfsigned_digest: sha256
#     provider: selfsigned
#     select_crypto_backend: cryptography
#   when: not cert.stat.exists

- name: Copy cert to ca-trust
  copy:
    src: /opt/registry/certs/domain.crt 
    dest: /etc/pki/ca-trust/source/anchors/
    remote_src: yes
  when: not cert.stat.exists

- name: update ca-trust
  command: update-ca-trust
  when: not cert.stat.exists

- name: Check for registry password existence
  stat:
    path: /opt/registry/auth/htpasswd
  register: passwd

# htpasswd -bBc /opt/registry/auth/htpasswd <user_name> <password> 
- name: Create htpasswd
  htpasswd:
    path: /opt/registry/auth/htpasswd
    name: "{{ registry_username }}"
    password: "{{ registry_password }}"
    crypt_scheme: bcrypt
    owner: root
    group: root
    mode: 0644
  when: not passwd.stat.exists

- name: Check if registry image tarball exists
  stat:
    path: "{{registry_image_tar_path}}"
  register: registry_image_out
  delegate_to: localhost

- block:
  - name: Copy registry image
    copy:
      src: "{{registry_image_tar_path}}"
      dest: "/tmp/{{registry_image_tar_path | basename}}"

  - name: Import registry container image
    command: podman image load -i "/tmp/{{registry_image_tar_path | basename}}"
  when: registry_image_out.stat.exists

# This may be a connected registry mirror
- name: Check if registry data tarball exists
  stat:
    path: "{{registry_data_tar_path}}"
  register: output

- name: Unarchive registry data to /opt/registry/data
  unarchive:
    src: "{{registry_data_tar_path}}"
    dest: /opt/registry/data
    owner: root
    mode: 0644
  when: output.stat.exists

- name: Install registry sevice file
  copy:
    src: ocp4-registry.service
    dest: /etc/systemd/system/ocp4-registry.service

- name: Open up firewall
  firewalld:
    port: 5000/tcp
    permanent: yes
    immediate: yes
    state: enabled

- name: Enable and start registry
  systemd:
    name: ocp4-registry
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Test registry uri
  uri:
    url: https://{{registry_server}}/v2/_catalog
    user: "{{ registry_username }}"
    password: "{{ registry_password }}"
    status_code: 200
    body_format: json
    validate_certs: no
  register: result
  failed_when: result.json.repositories is not defined

